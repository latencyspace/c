/* 배열의 선언 및 사용 */--------------------------------------------------------------------------------------

#include <stdio.h>

int main(void)
{
    int arr[5];
    int i;

    arr[0] = 10;
    arr[1] = 20;
    arr[2] = 30;
    arr[3] = 40;
    arr[4] = 50;

    for(i = 0 ; i < 5 ; i++)
        printf("arr[%d] = %d\n", i, arr[i]);

    return 0;
}



/* 배열 초기화*/--------------------------------------------------------------------------------------

#include <stdio.h>

int main(void)
{
    int arr[5] = { 1, 2, 3, 4, 5 };
    int i;

    for(i = 0 ; i < 5 ; i++)
        printf("%d ", arr[i]);
    printf("\n");

    return 0;
}


//배열 크기보다 초기값이 적게 지정한 경우--------------------------------------------------------------------------------------

#include <stdio.h>

int main(void)
{
    int amount[5] = { 1, 1, 5 };    // 1, 1, 5, 0, 0으로 초기화
    int price[5] = { 0 };           // 배열 전체를 0으로 초기화
    int i;

    printf("amount = ");
    for (i = 0; i < 5; i++)
        printf("%d ", amount[i]);
    printf("\n");

    printf("price  = ");
    for (i = 0; i < 5; i++)
        printf("%d ", price[i]);
    printf("\n");
    return 0;
}



//잘못된 인덱스의 사용예--------------------------------------------------------------------------------------

#include <stdio.h>

int main(void)
{
    int arr[5] = { 10, 20, 30, 40, 50 };
    int i;

    printf("arr = ");
    for (i = 0; i < 5; i++)
        printf("%d ", arr[i]);
    printf("\n");

    printf("arr[5] = %d\n", arr[5]);    // 할당되지 않은 메모리를 읽어온다.
    arr[5] = 100;                       // 할당되지 않은 메모리를 변경한다. (실행 에러)

    return 0;
}

/* 정수형 배열의 합계와 평균 구하기 */--------------------------------------------------------------------------------------

#include <stdio.h>

#define MAX 5

int main(void)
{
    int arr[MAX] = { 0 };
    int i;
    int sum;
    double average;

    printf("%d개의 정수를 입력하세요 : ", MAX);
    for(i = 0 ; i < MAX ; i++)
        scanf("%d", &arr[i]);

    for(i = 0, sum = 0 ; i < MAX ; i++)
        sum += arr[i];

    average = (double)sum / (double)MAX;
    printf("합계 : %d, 평균 : %5.2f\n", sum, average);

    return 0;
}
=============
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define MAX 5

int main(void)
{
    int x[MAX] = { 10,20,30,40,50 };
    int y[MAX] = { 10,20,30,40,50 };
    int i = 0;
    int is_equal = 1;
    if (x == y) {
        printf("배열의 주소가 같습니다\n");
    }
    else {
        printf("배열의 주소가 다릅니다.\n");
    }
    for (i = 0; i < MAX; i++) {
        if (x[i] != y[i]) {
            is_equal = 0;
            break;
        }
    }
    if (is_equal==1) {
        printf("두 배열의 원소가 같습니다\n");
    }
    else {
        printf("두 배열의 원소가 다릅니다.\n");
    }
    return 0;
}
==========================


/* 이차원 배열의 선언 및 사용예 */--------------------------------------------------------------------------------------

#include <stdio.h>
#define ROW 3
#define COL 2

int main(void)
{
    int data[ROW][COL];
    int i, j, k;

    for (i = 0, k = 0; i < ROW; i++)    // 행 인덱스를 증가시킨다.
        for (j = 0; j < COL; j++)       // 열 인덱스를 증가시킨다.
            data[i][j] = ++k;           // 배열의 원소에 0부터 1씩 커지는 값을 저장한다.

    for (i = 0; i < ROW; i++) {
        for (j = 0; j < COL; j++)
            printf("%3d ", data[i][j]);
        printf("\n");
    }

    printf("sizeof(data)       = %d\n", sizeof(data));
    printf("sizeof(data[0])    = %d\n", sizeof(data[0]));
    printf("sizeof(data[0][0]) = %d\n", sizeof(data[0][0]));
}


//이차원 배열 초기화--------------------------------------------------------------------------------------

#include <stdio.h>
#define ROW 3
#define COL 2

int main(void)
{
    int data[ROW][COL]={
         {10,20},{30,40},{50,60},
     };
    int i, j;

    for (i = 0; i < ROW; i++) {
        for (j = 0; j < COL; j++)
            printf("%3d ", data[i][j]);
        printf("\n");
    }

    return 0;
}

//7-9--------------------------------------------------------------------------------------

#include <stdio.h>
void print_array(int arr[], int size);      // 함수 선언

int main(void)
{
    int data[3] = { 10, 20, 30 };
    int x[] = { 1, 2, 3, 4, 5 };
    int size = sizeof(x) / sizeof(x[0]);    // x 배열의 크기

    printf("data = ");
    print_array(data, 3);       // 배열 이름과 크기를 인자로 전달한다.

    printf("x    = ");
    print_array(x, size);       // 배열 이름과 크기를 인자로 전달한다.

    printf("x    = ");
    print_array(x, 3);          // 인자로 전달한 크기만큼 출력한다.
}

void print_array(int arr[], int size)   // 배열형의 매개변수에서 크기는 생략한다.
{                               // 배열의 크기는 별도의 매개변수로 받아와야 한다.  
    int  i;
    for (i = 0; i < size; i++)  // 매개변수로 받아온 배열의 크기를 이용한다.
        printf("%d ", arr[i]);
    printf("\n");
}

//7-10--------------------------------------------------------------------------------------

#define  _CRT_SECURE_NO_WARNINGS        // scanf 사용을 위해 필요
#include <stdio.h>

void print_array(int arr[], int size)   // 배열의 원소를 출력하는 함수
{
    int  i;
    for (i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main(void)
{
    int data[] = { 12, 34, 51, 22, 91, 12, 15 };    // 배열의 크기 생략
    int size, i;
    int key;                                // 탐색할 키값을 입력받을 변수

    size = sizeof(data) / sizeof(data[0]);  // 배열의 크기
    printf("data = ");
    print_array(data, size);        // data 배열을 출력한다.

    printf("찾을 값(키)? ");
    scanf("%d", &key);              // 탐색 키를 입력받는다.
    for (i = 0; i < size; i++) {
        if (data[i] == key)         // 탐색 키와 값이 같은 원소를 찾는다. 
            printf("찾은 원소의 인덱스: %d\n", i);
    }
}

//7-11--------------------------------------------------------------------------------------

#include <stdio.h>
#define SIZE 5

void print_array(int arr[], int size)   // 배열의 원소를 출력하는 함수
{
    int  i;
    for (i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main(void)
{
    int data[SIZE] = { 52, 31, 28, 17, 46 };
    int i, j, temp;
    int index_min;      // 아직 정렬되지 않은 원소 중 가장 작은 원소의 인덱스

    for (i = 0; i < SIZE - 1; i++) {        // 0~(i-1)까지는 정렬된 상태이다.
        index_min = i;
        for (j = i + 1; j < SIZE; j++) {
            // data[i]~data[SIZE-1]중에서 가장 작은 원소의 인덱스를 찾는다.
            if (data[index_min] > data[j])  // 오름차순 정렬
                index_min = j;
        }
        if (i != index_min) {       // data[i]를 data[index_min]와 맞바꾼다.
            temp = data[i];
            data[i] = data[index_min];
            data[index_min] = temp;
        }                           // data[i]가 i번째로 작은 값이 된다.

        printf("i = %d 일때 정렬 결과 : ", i);
        print_array(data, SIZE);    // i번째 작은 값을 찾은 후의 정렬 결과 출력
    }
}

