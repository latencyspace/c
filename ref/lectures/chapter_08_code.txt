/* Ex08_01.c */--------------------------------------------------------------------
#include <stdio.h>

int main(void)
{
    char *pc;
    int *pi;
    double *pd;

    printf("pc의 크기 : %d\n", sizeof(pc));
    printf("pi의 크기 : %d\n", sizeof(pi));
    printf("pd의 크기 : %d\n", sizeof(pd));

    printf("char*  의 크기 : %d\n", sizeof(char*));
    printf("short* 의 크기 : %d\n", sizeof(short*));
    printf("int*   의 크기 : %d\n", sizeof(int*));
    printf("float* 의 크기 : %d\n", sizeof(float*));
    printf("double*의 크기 : %d\n", sizeof(double*));

    return 0;
}

//포인터의 바이트 크기 구하기--------------------------------------------------------------------

#include <stdio.h>

int main(void)
{
    int *pi;        // *는 포인터 수식어이며, 다음에 나오는 변수를 포인터로 선언한다.
    double *pd;     // 포인터의 크기는 데이터형에 관계없이 항상 같다.
    char *pc;

    printf("sizeof(pi) = %d\n", sizeof(pi));        // 포인터의 크기를 구한다.
    printf("sizeof(pd) = %d\n", sizeof(pd));
    printf("sizeof(pc) = %d\n", sizeof(pc));

    printf("sizeof(int*) = %d\n", sizeof(int*));    // 포인터형의 크기를 구한다.
    printf("sizeof(double*) = %d\n", sizeof(double*));
    printf("sizeof(char*) = %d\n", sizeof(char*));
}

//포인터의 선언및 초기화--------------------------------------------------------------------

#include <stdio.h>

int main(void)
{
    int a = 10;
    int *p = &a;    // p를 a의 주소로 초기화한다. p는 a를 가리킨다.
    int *q = NULL;  // NULL로 초기화하면, 어떤 변수도 가리키지 않는다는 뜻이다.
    int *r = 0;     // NULL 대신 0을 사용할 수 있다.
    
    printf("p = %p\n", p);  // p에 저장된 주소를 출력한다.
    printf("q = %p\n", q);  
    printf("r = %p\n", r);
}

/* Ex08_02.c */--------------------------------------------------------------------

#include <stdio.h>

int main(void)
{
    int x;
    int *p;

    p = &x;
    *p = 10;

    printf("*p = %d\n", *p);
    printf("x  = %d\n", x);

    printf("p  = %p\n", p);
    printf("&x = %p\n", &x);

    printf("&p = %p\n", &p);

    return 0;
}

//포인터의 사용--------------------------------------------------------------------

#include <stdio.h>

int main(void)
{
    int a = 10;
    int* p = &a;                // p는 a를 가리키는 포인터이다.

    printf(" a = %d\n", a);     // a의 값을 출력한다.
    printf("&a = %p\n", &a);    // a의 주소를 출력한다.

    printf(" p = %p\n", p);     // 포인터에 저장된 값을 출력한다. (a의 주소 출력)
    printf("*p = %d\n", *p);    // p가 가리키는 int형 변수 a를 출력한다.
    printf("&p = %p\n", &p);    // p의 주소를 출력한다. (포인터에도 주소가 있다.)

    *p = 20;                    // p가 가리키는 int 변수 a에 20을 저장한다.
    printf("*p = %d\n", *p);    // p가 가리키는 int 변수 a를 출력한다.
}


//8-4 포인터가 필요한 경우=======================================================
#include <stdio.h>

void test1(int x)   // 매개변수 x는 함수가 호출될 때 main의 x로 초기화된다.
{
    x = 20;         // 매개변수를 변경하는 것은 아무 의미가 없다.
}                   // 매개변수 x는 test1이 리턴할 때 소멸된다.

void test2(int *p)  // 매개변수 p는 main의 x를 가리킨다.
{
    *p = 20;        // p가 가리키는 변수(main의 x)에 20을 대입한다.
}

int main(void)
{
    int x = 10;
    test1(x);       // main의 x를 test1의 매개변수 x로 복사해서 전달한다.
    printf("test1 호출 후 x = %d\n", x);  // x의 값은 변경되지 않는다.

    test2(&x);      // x의 주소를 test2의 매개변수 p로 전달한다.
    printf("test2 호출 후 x = %d\n", x);  // x의 값이 변경된다.
}

//포인터와 참조하는 변수 데이터형 일치=======================================================
#include <stdio.h>

int main(void) {
	int x = 1;
	double* pd = 0;
	pd = &x;
	*pd = 12.34;   //실행시 에러발생
	printf("%f\n", *pd);
}


//const포인터=======================================================

#include <stdio.h>

int main(void)
{
    int a = 10, b = 20;

    const int *p1 = &a;         // p1는 a에 읽기 전용으로 접근한다. (읽기 전용 포인터)
    int *const p2 = &a;         // p2는 a 전용 포인터이다. (특정 변수의 전용 포인터)
    const int * const p3 = &a;  // p3는 읽기 전용이면서 a 전용 포인터

    printf("*p1 = %d\n", *p1);  // p1이 가리키는 변수 a의 값을 읽어온다.
    //*p1 = 100;                // p1이 가리키는 변수의 값을 변경할 수는 없다.(컴파일 에러)
    p1 = &b;                    // p1이 다른 변수 b를 가리킬 수 있다. 
    printf("*p1 = %d\n", *p1);  // p1이 가리키는 변수 b의 값을 읽어온다.

    //p2 = &b;                  // p2는 다른 변수를 가리킬 수 없다.(컴파일 에러)
    *p2 = 100;                  // p2가 가리키는 변수의 값을 변경할 수 있다.
    printf("*p2 = %d\n", *p2); 

    //*p3 = 100;                // p3가 가리키는 변수의 값을 변경할 수 없다.(컴파일 에러)
    //p3 = &b;                  // p3가 다른 변수를 가리킬 수 없다.(컴파일 에러)
    printf("*p3 = %d\n", *p3);  // p3이 가리키는 변수 a의 값을 읽어온다.
}


/* Ex08_03.c */=======================================================
#include <stdio.h>

int main(void)
{
    char ch;
    char *pc = &ch;

    int n;
    int *pi = &n;

    double d;
    double *pd = &d;

    int arr[3];
    int i;

    for(i = 0 ; i < 3 ; i++)
        printf("pc+%d = %p\n", i, pc+i);

    for(i = 0 ; i < 3 ; i++)
        printf("pi+%d = %p\n", i, pi+i);

    for(i = 0 ; i < 3 ; i++)
        printf("pd+%d = %p\n", i, pd+i);

    for(i = 0 ; i < 5 ; i++)
        printf("&arr[%d]-&arr[0] = %d\n", i, &arr[i]-&arr[0]);
    
    return 0;
}

//포인터+정수 연산=======================================================

#include <stdio.h>

int main(void)
{
    int *p = (int*)0x100;       // 포인터 연산 결과를 확인하기 위해 절대 주소를 대입한다.
    double *q = (double*)0x100;
    char *r = (char*)0x100;

    printf("int*   : %p, %p, %p\n", p, p + 1, p + 2); // 4바이트씩 늘어난 주소를 출력
    printf("double*: %p, %p, %p\n", q, q + 1, q + 2); // 8바이트씩 늘어난 주소를 출력
    printf("char*  : %p, %p, %p\n", r, r + 1, r + 2); // 1바이트씩 늘어난 주소를 출력
}

//포인터 증감연산=======================================================

#include <stdio.h>

int main(void)
{
    int arr[5] = { 1, 2, 3, 4, 5 };
    int *p = &arr[0];               // p는 arr[0]을 가리킨다. 
    int i;

    for (i = 0; i < 5; i++, p++)    // p는 arr[0]~arr[4]를 가리킨다.
    {
        printf("p= %p, ", p);       // p가 가리키는 원소가 계속 바뀐다.
        printf("*p = %d\n", *p);    // p가 가리키는 원소의 값을 출력한다.
    }
}

//포인터를 배열처럼 사용=======================================================

#include <stdio.h>

int main(void)
{
    int arr[5] = { 1, 2, 3, 4, 5 };
    int* p = arr;   // int *p = &arr[0];과 같은 의미. 배열 이름은 배열의 시작 주소
    int i;

    for (i = 0; i < 5; i++)
        printf("p[%d] = %d\n", i, p[i]);    // p를 배열처럼 사용한다.
}
-----------------------------------------
#include <stdio.h>

int main(void)
{
    int arr[5] = { 1, 2, 3, 4, 5 };
    int* p = &arr[2];   

    for (int i = 0; i < 3; i++) {
        printf("p[%d] = %d, ", i, p[i]);
        printf("*(p+%d) = %d, ",i, *(p+i));
        printf("arr[%d] = %d\n", i+2,arr[i+2]);
    }
}

여러가지 포인터-포인터 배열+++++++++++++++++++++++++++++++++
#include <stdio.h>

int main(void)
{
    int a, b, c, d, e;
    int *arr[5] = { &a, &b, &c, &d, &e };   // int의 주소로 초기화된 포인터 배열
    int i;

    for (i = 0; i < 5; i++)
    {
        *arr[i] = i;
        printf("%d ", *arr[i]);             // arr[i]는 포인터이다.
    }
    printf("\n");

    return 0;
}

여러가지 포인터-배열에 대한 포인터+++++++++++++++++++++++++++++++++
#include <stdio.h>

int main(void)
{
    int data[3][5] = {
        {1, 2, 3, 4, 5},
        {6, 7, 8, 9, 10},
        {11, 12, 13, 14, 15}
    };
    int(*p)[5] = &data[0];              // int[5] 배열에 대한 포인터
    int i, j;

    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 5; j++)
            printf("%2d ", p[i][j]);    // 2차원 배열인 것처럼 사용한다.
        printf("\n");
    }

    return 0;
}
//swap=======================================================

#include <stdio.h>
void swap(int* px, int* py);    // 매개변수는 인자에 대한 포인터형으로 선언한다.

int main(void)
{
    int a = 1, b = 2;
    printf("a = %d, b = %d\n", a, b);

    swap(&a, &b);               // 인자로 전달하려는 변수의 주소를 전달한다.
    printf("a = %d, b = %d\n", a, b);
}

void swap(int* px, int* py)     // 참조에 의한 호출
{
    int temp = *px; // temp를 px가 가리키는 변수의 값으로 초기화한다.
    *px = *py;      // py가 가리키는 변수의 값을 px가 가리키는 변수에 대입한다.
    *py = temp;     // py가 가리키는 변수에 temp를 대입한다.
}

//8-10출력 매개변수를 갖는 함수=======================================================

#include <stdio.h>
// 1. 처리 결과를 저장할 변수를 가리키는 포인터형으로 출력 매개변수를 선언한다.
void get_sum_product(int x, int y, int *psum, int *pproduct);   // x, y는 입력 매개변수   

int main(void)
{
    int sum, product;

    // 2. 처리 결과를 받아 올 변수의 주소를 전달한다
    get_sum_product(123, 456, &sum, &product);
    printf("sum = %d, product = %d\n", sum, product);
}

void get_sum_product(int x, int y, int *psum, int *pproduct)
{
    // 3. 포인터형의 매개변수가 가리키는 곳에 처리 결과를 저장한다.
    *psum = x + y;
    *pproduct = x * y;
}

//8-11 배열을 매개변수로 갖는 함수=======================================================

#include <stdio.h>
#define SIZE 10

void copy_array(const int *source, int *target, int size);
void print_array(const int *arr, int size); 

int main(void)
{
    int x[SIZE] = { 10, 20, 30, 40, 50 };
    int y[SIZE] = { 0 };

    printf("x = ");
    print_array(x, SIZE);   // 배열의 시작 주소 x를 arr로 전달한다.(참조에 의한 호출)

    copy_array(x, y, SIZE);
    printf("y = ");
    print_array(y, SIZE);
}

// source와 size는 입력 매개변수,  target은 출력 매개변수
void copy_array(const int *source, int *target, int size)
{
    int i;
    for (i = 0; i < size; i++)
        target[i] = source[i];  // source, target은 포인터지만 배열처럼 사용한다.
}

void print_array(const int *arr, int size)  // arr는 입력 매개변수
{
    int  i;
    for (i = 0; i < size; i++)
        printf("%d ", arr[i]);  // arr은 포인터지만 배열처럼 사용한다.
    printf("\n");
}