EX.10-1=======================================================

#include <stdio.h>

// 구조체를 소스 파일 시작 부분에 정의한다.
struct content {        // VOD 콘텐츠   
    char    title[40];  // 영화 제목
    int     price;      // VOD 가격
    double  rate;       // 평점(0~10 사이의 값)
};

int main(void)
{
    printf("content 구조체의 크기: %d\n", sizeof(struct content));
}

#pragma pack(show)      // 컴파일러의 메모리 정렬 정보를 출력창에 경고로 표시한다.

EX.10-2=======================================================
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

struct content {
    char    title[40];
    int     price;
    double  rate;
};

int main(void)
{
    struct content c1 = { "Avengers", 11000, 8.8 }; // 구조체 변수의 선언 및 초기화
    struct content c2, c3;          // 초기화되지 않은 구조체 변수 선언(쓰레기값)

    strcpy(c2.title, "Aquaman");    // 구조체 변수 c2의 멤버를 변경한다.
    c2.price = 5500;
    c2.rate = 7.1;

    strcpy(c3.title, "Shazam!");    // 구조체 변수 c3의 멤버를 변경한다.
    c3.price = 7700;
    c3.rate = 7.4;

    printf("c1 = %s, %d, %.1f\n", c1.title, c1.price, c1.rate); // c1의 멤버들을 출력한다.
    printf("c2 = %s, %d, %.1f\n", c2.title, c2.price, c2.rate); // c2의 멤버들을 출력한다.
    printf("c3 = %s, %d, %.1f\n", c3.title, c3.price, c3.rate); // c3의 멤버들을 출력한다.
}
EX.10-3=======================================================

#include <stdio.h>
#include <string.h>

struct content {
    char    title[40];
    int     price;
    double  rate;
};

int main(void)
{
    struct content c1 = { "Avengers", 11000, 8.8 };
    struct content c2 = c1;     // 같은 멤버끼리 1:1로 복사해서 초기화한다.
    struct content c3 = { 0 };  // 0으로 초기화

    c3 = c1;                    // 같은 멤버끼리 1:1로 복사해서 대입한다.

    printf("c1 = %s, %d, %.1f\n", c1.title, c1.price, c1.rate);
    printf("c2 = %s, %d, %.1f\n", c2.title, c2.price, c2.rate);
    printf("c3 = %s, %d, %.1f\n", c3.title, c3.price, c3.rate);
}

EX.10-4=======================================================

#include <stdio.h>
#include <string.h>

struct content {
    char    title[40];
    int     price;
    double  rate;
};

int main(void)
{
    struct content c1 = { "Avengers", 11000, 8.8 };
    struct content c2 = c1;         // c1으로 c2를 초기화한다.

    // 각각의 멤버끼리 같은지 비교한다.
    if (strcmp(c1.title, c2.title) == 0 && c1.price == c2.price && c1.rate == c2.rate)
        printf("c1과 c2의 값이 같습니다.\n");
    else
        printf("c1과 c2의 값이 다릅니다.\n");
}

EX.10-5=======================================================

#include <stdio.h>
#include <string.h>

struct content {
    char    title[40];
    int     price;
    double  rate;
};

int main(void)
{
    struct content arr[] = {        // 구조체 배열의 선언 및 초기화
        {"Avengers", 11000, 8.8},     // arr[0]의 초기값
        {"Aquaman", 5500, 7.1},       // arr[1]의 초기값
        {"Shazam!", 7700, 7.4}        // arr[2]의 초기값
    };
    int size = sizeof(arr) / sizeof(arr[0]);    // 배열의 크기
    int i;

    for (i = 0; i < size; i++)      // arr[i]는 content 구조체 변수이다.
        printf("arr[%d] = %s, %d, %.1f\n", i, arr[i].title, arr[i].price, arr[i].rate);
}

EX.10-6=======================================================

#include <stdio.h>
#include <string.h>

struct content {
    char    title[40];
    int     price;
    double  rate;
};

int main(void)
{
    struct content arr[] = {                    // 초기화된 구조체 배열
        {"Avengers", 11000, 8.8}, {"Aquaman", 5500, 7.1}, {"Shazam!", 7700, 7.4},
        {"X-Men", 3300, 8.0},     {"Us", 8800, 7.1},      {"Inception", 2200, 8.7}
    };
    int size = sizeof(arr) / sizeof(arr[0]);    // 구조체 배열의 크기
    int i;
    char title[40];                 // 검색할 콘텐츠 제목을 저장할 변수

    printf("제목? ");
    gets_s(title, sizeof(title));   // 빈칸을 포함한 문자열 입력

    for (i = 0; i < size; i++)                  // size는 구조체 배열의 크기
        if (strcmp(arr[i].title, title) == 0)   // 제목이 같은 원소를 찾으면
            break;                              // for를 탈출한다.(i는 찾은 원소의 인덱스)

    if (i == size)      // for문을 끝까지 수행했지만 검색이 실패한 경우
        printf("해당 콘텐츠를 찾을 수 없습니다.\n");
    else                // 검색이 성공한 경우(i는 찾은 원소의 인덱스)
        printf("%s: 가격=%d, 평점=%.1f\n", arr[i].title, arr[i].price, arr[i].rate);
}

EX.10-7=======================================================

#define _CRT_SECURE_NO_WARNINGS     // Visual Studio 2019에서 strcat 사용 시 필요
#include <stdio.h>
#include <string.h>

struct content {
    char    title[40];
    int     price;
    double  rate;
};

int main(void)
{
    struct content c1 = { "Avengers", 11000, 8.8 };
    struct content* p = &c1;    // content 구조체 변수를 가리키는 포인터 

    p->price *= 0.8;                // p가 가리키는 구조체의 price 변경 (20% 할인)
    p->rate = 8.9;                  // p가 가리키는 구조체의 rate 변경
    strcat(p->title, ": Endgame");  // p가 가리키는 구조체의 title에 문자열 연결

    printf("%s, %d, %.1f\n", p->title, p->price, p->rate);
}


EX.10-8=======================================================

#include <stdio.h>

struct point {                       // 구조체 정의가 함수 선언보다 앞에 와야 한다.
    int x, y;
};
void print_point(struct point pt);   // 함수 선언

int main(void)
{
    struct point arr[] = {          // point 구조체 배열
        {10, 20}, {35, 41}, {12, 63}, {72, 55}, {92, 86}, {4, 27}
    };
    int size = sizeof(arr) / sizeof(arr[0]);
    int i;

    for (i = 0; i < size; i++) {
        print_point(arr[i]);        // arr[i]를 함수의 매개변수 pt로 복사해서 전달한다.
    }
    printf("\n");
}

void print_point(struct point pt)   // pt는 값에 의한 호출로 전달된다.
{
    printf("(%d, %d) ", pt.x, pt.y);
}

EX.10-9=======================================================

#define _CRT_SECURE_NO_WARNINGS     // Visual Studio 2019에서 scanf 사용 시 필요
#include <stdio.h>

struct point {
    int x, y;
};
void print_point(const struct point* ptr);      // ptr은 입력 매개변수
void move_point(struct point* ptr, int offset); // ptr은 입출력 매개변수

int main(void)
{
    struct point arr[] = {
        {10, 20}, {35, 41}, {12, 63}, {72, 55}, {92, 86}, {4, 27}
    };
    int size = sizeof(arr) / sizeof(arr[0]);
    int i, offset;

    for (i = 0; i < size; i++) {
        print_point(&arr[i]);           // arr[i]의 주소를 매개변수 ptr로 전달한다.
    }                                   // 구조체를 복사하지 않고 전달하므로 효율적이다.
    printf("\n");

    printf("이동할 오프셋? ");
    scanf("%d", &offset);
    for (i = 0; i < size; i++) {
        move_point(&arr[i], offset);    // arr[i]를 offset만큼 이동한다.
        print_point(&arr[i]);           // 이동된 arr[i]를 출력한다.
    }
}

void print_point(const struct point* ptr)       // ptr은 입력 매개변수
{
    printf("(%d, %d) ", ptr->x, ptr->y);    // ptr이 포인터이므로 ->로 멤버에 접근한다.
}

void move_point(struct point* ptr, int offset)  // ptr은 입출력 매개변수
{
    ptr->x = ptr->x + offset;               // ptr이 가리키는 구조체의 멤버를 변경한다.
    ptr->y = ptr->y + offset;               // ptr이 가리키는 구조체의 멤버를 변경한다.
}

EX.10-10=======================================================

#include <stdio.h>
#include <math.h>       // 제곱근을 구하는 sqrt 함수를 호출하려면 필요하다.

struct point {          // point 구조체가 line 구조체보다 앞에 정의되어야 한다.
    int x, y;
};
struct line {           // point 구조체를 이용해서 line 구조체을 정의한다.
    struct point start, end;    
};
void print_point(const struct point* ptr);
double get_length(const struct line* ptr);

int main(void)
{
    struct line ln1 = { 
        {10, 20}, {30, 40}      // start는 {10, 20}으로 end는 {30, 40}으로 초기화
    };   
    printf("직선 정보: ");
    print_point(&ln1.start);    // ln1.start를 point 구조체 변수로 사용할 수 있다.                    
    print_point(&ln1.end);      // ln1.end를 point 구조체 변수로 사용할 수 있다.  
    printf("\n길이: %f\n", get_length(&ln1));     // line 구조체의 주소를 전달한다.
}

void print_point(const struct point* ptr)
{
    printf("(%d, %d) ", ptr->x, ptr->y);
}

double get_length(const struct line* ptr)   // ptr은 입력 매개변수
{
    int dx = ptr->end.x - ptr->start.x;     // 여러 번 연속해서 멤버에 접근할 수 있다.
    int dy = ptr->end.y - ptr->start.y;
    return sqrt(dx * dx + dy * dy);     // sqrt는 제곱근을 구하는 표준 C 라이브러리 함수
}

EX.10-11=======================================================

#include <stdio.h>

enum direction { north, south, east, west };  // 열거체와 열거 상수 정의

int main(void)
{
    enum direction moves[] = {      // 열거체 배열 (이동 방향을 순서대로 저장)
        north, north, east, south, south, west,
    };
    int size = sizeof(moves) / sizeof(moves[0]);
    int i;
    printf("이동 순서: ");
    for (i = 0; i < size; i++) {
        switch (moves[i]) {         // moves[i] 열거체 변수의 값에 따라 처리
        case north:                 // 열거 상수는 case문에 사용할 수 있다.
            printf("북 ");
            break;
        case south:
            printf("남 ");
            break;
        case east:
            printf("동 ");
            break;
        case west:
            printf("서 ");
            break;
        }
    }
    printf("\n");
}

EX.10-12=======================================================
#include <stdio.h>

union test {
    int     i;                          // 모든 멤버가 같은 주소에 할당된다.
    char    c;
    short   s;
};

int main(void)
{
    union test t1 = { 0x12345678 };     // t1.i를 초기화한다.

    printf("t1.i의 주소 = %p\n", &t1.i);   // 멤버들의 주소가 모두 같다.
    printf("t1.c의 주소 = %p\n", &t1.c);
    printf("t1.s의 주소 = %p\n", &t1.s);

    printf("sizeof(union test) = %d\n", sizeof(union test));    // i 멤버의 크기와 같다.

    printf("t1.i = %x\n", t1.i);            // 12345678 출력
    printf("t1.c = %x\n", t1.c);            // 78 출력
    printf("t1.s = %x\n", t1.s);            // 5678 출력
}


EX.10-13=======================================================

#include <stdio.h>

typedef struct point {      // point 구조체를 정의하면서 함께 typedef를 정의한다.
    int x, y;
} point_t;
void print_point(const point_t* ptr);   // point_t를 매개변수의 데이터형으로 사용한다.

int main(void)
{
    point_t pt1 = { 10, 20 };           // struct point 대신 point_t형을 사용할 수 있다.
    print_point(&pt1);
}

void print_point(const point_t* ptr)
{
    printf("(%d, %d) ", ptr->x, ptr->y);
}